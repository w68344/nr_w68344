import random
import networkx as nx
import matplotlib.pyplot as plt


# Алгоритм Buble Sort
def buble_sort(lista):
    lista = lista
    for b in range(0,(len(lista)-1)):
        for a in range(0,(len(lista)-1)):
            if lista[a] > lista[a+1]:
                lista[a],lista[a+1] = lista[a+1],lista[a]
    print(lista)



#Алгоритм Selection Sort
def selection_sort(lista):
    for a in range(0,(len(lista)-1)):
        for c in range(a,(len(lista))):
            if lista[c]< lista[a]:
                lista[a],lista[c]=lista[c],lista[a]
    print(lista)



#Алгоритм  Insection Sort
def insection_sort(lista):
    for p in range(0,(len(lista)-1)):
        for a in range(0,(len(lista)-1)):
            if lista[a] < lista[a+1]:
                continue
            if lista[a] > lista[a+1]:
                while lista[a+1] < lista[a]:
                        lista[a+1],lista[a]= lista[a],lista[a+1]
    print(lista)

def insertion_sort(lista):
    for i in range(1, len(lista)):
        item_to_insert = lista[i]
        j = i - 1
        while j >= 0 and lista[j] > item_to_insert:
            lista[j + 1] = lista[j]
            j -= 1
        lista[j + 1] = item_to_insert
    print(lista)



#Линейный поиск
def Linear_Search(lista, element):
    for i in range (len(lista)):
        if lista[i] == element:
            return i


#Графы
#Создание графа
G = nx.Graph()
# Добавление елментов
G.add_nodes_from([6,7,8,9,10,11])
# Дообавление двусторонней связи между вершинами
G.add_edge(1, 2)
#dodanie krawędzi pomiędzy wierzchołkami 1 - 3 i 2 - 3.
G.add_edges_from([(1,3), (2,3)])
# wyświetlenie wszystkich krawędzi, które przylegają do danego wierzchołka.
print(G.edges([1]))
#dostęp do liczby wierzchołków w grafie
print(f"Liczba wierzchołków: {G.number_of_nodes()}")
#dostęp do liczby krawędzi w grafie
print(f"Liczba krawędzi: {G.number_of_edges()}")


print(f"Wierzchołki w grafie G: {G.nodes}") #dostęp do wierzchołków w grafie
print(f"Krawędzi w grafie G: {G.edges}") #dostęp do krawędzi w grafie
print(f"Wierzchołki sąsiadujące z wierzchołkiem 1: {list(G.adj[1])}") #lista wierzchołków sąsiadujących ze wskazanym wierzchołkiem
print(f"Liczba stopni wierzchołka 1: {G.degree[1]}") #stopień oznacza z iloma wierzchołkami sąsiaduje dany wierzchołek.


# Рисование графа
G = nx.Graph()
G.add_edges_from([(1,2), (2,3), (3,4), (4,5), (5, 1)])
nx.draw(G, with_labels=True)
